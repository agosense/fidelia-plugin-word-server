{
  "swagger": "2.0",
  "info": {
    "version": "1.8.11",
    "title": "fidelia REST API",
    "contact": {
      "url": "http://www.agosense.com",
      "email": "support@agosense.com"
    },
    "license": {
      "name": "agosense GmbH license",
      "url": " http://agosense.com/english/media-library/terms-and-conditions"
    }
  },
  "basePath": "/fidelia/ff/api/rest",
  "tags": [
    {
      "name": "Fidelia Application Admin"
    },
    {
      "name": "Fidelia Application"
    },
    {
      "name": "Index"
    },
    {
      "name": "Server"
    },
    {
      "name": "Internal"
    },
    {
      "name": "Authentication"
    },
    {
      "name": "Actions"
    },
    {
      "name": "Report Templates"
    },
    {
      "name": "View Templates"
    }
  ],
  "security": [
    {
      "auth": []
    },
    {
      "basicAuth": []
    }
  ],
  "paths": {
    "/v1/users/{userId}": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "retrieves an existing user",
        "description": "",
        "operationId": "usersGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "put": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "updates an existing user",
        "description": "",
        "operationId": "usersPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "removes an existing user",
        "description": "",
        "operationId": "usersDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "patch": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "Activate a inactive user",
        "description": "",
        "operationId": "usersActivate",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/traces/{traceId}/edges/{edgeId}": {
      "put": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "updates an existing edge",
        "description": "",
        "operationId": "edgesPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "traceId",
            "in": "path",
            "description": "trace identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "edgeId",
            "in": "path",
            "description": "edge identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EdgeUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "removes an existing edge",
        "description": "",
        "operationId": "edgesDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "traceId",
            "in": "path",
            "description": "trace identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "edgeId",
            "in": "path",
            "description": "edge identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/templates/{templateId}/attributes/{attributeId}/enumerationvalues/{key}": {
      "put": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "updates an existing enumeration value",
        "description": "",
        "operationId": "attributesEnumerationValuePut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnumerationValueUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "deletes an enumeration value",
        "description": "",
        "operationId": "attributesEnumerationValueDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "key",
            "in": "path",
            "description": "key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/templates/{templateId}/attributes/{attributeId}/enumerationvalues": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "fetches enumeration values",
        "description": "",
        "operationId": "attributesEnumerationValueGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnumerationValue"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "adds a new enumeration value",
        "description": "",
        "operationId": "attributesEnumerationValuePost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnumerationValueCreate"
            }
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/templates/{templateId}/attributes/{attributeId}/enumerationvaluerules": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "fetches enumeration value rules information",
        "description": "",
        "operationId": "attributesEnumerationValueRulesGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnumerationValueRule"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "adds a new enumeration value rule",
        "description": "",
        "operationId": "attributesEnumerationValueRulesPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnumerationValueRuleUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/templates/{templateId}/attributes/{attributeId}/enumerationvaluerules/{ruleIndex}": {
      "delete": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "removes the specified enumeration value rule",
        "description": "",
        "operationId": "attributesEnumerationValueRulesDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "ruleIndex",
            "in": "path",
            "description": "rule index",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/traces/{traceId}": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "fetches trace information",
        "description": "",
        "operationId": "tracesGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "traceId",
            "in": "path",
            "description": "trace identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/Trace"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "put": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "update an existing trace",
        "description": "",
        "operationId": "tracesPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "traceId",
            "in": "path",
            "description": "trace identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TraceUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/traces": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "fetches trace information",
        "description": "",
        "operationId": "tracesGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "forTemplate",
            "in": "query",
            "description": "for template id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Trace"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "adds a new trace",
        "description": "",
        "operationId": "tracesPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TraceCreate"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/TraceResponse"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/traces/{traceId}/edges": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "fetches edge information",
        "description": "",
        "operationId": "edgesGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "traceId",
            "in": "path",
            "description": "trace identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Edge"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "adds a new edge",
        "description": "",
        "operationId": "edgesPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "traceId",
            "in": "path",
            "description": "trace identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EdgeCreate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/users": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "retrieves existing users",
        "description": "",
        "operationId": "usersGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "adds a new user",
        "description": "",
        "operationId": "usersPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/UserCreate"
            }
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/templates/{templateId}": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "fetches templateService information",
        "description": "",
        "operationId": "templatesGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/Template"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "put": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "update an existing templateService",
        "description": "",
        "operationId": "templatesPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TemplateUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "removes a templateService",
        "description": "",
        "operationId": "templatesDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/templates": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "fetches templateService information",
        "description": "",
        "operationId": "templatesGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Template"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "adds a new templateService",
        "description": "",
        "operationId": "templatesPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TemplateUpdate"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/users/{userId}/groups": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "retrieves groups of a user",
        "description": "",
        "operationId": "usersGetGroups",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "user identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/groups": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "retrieves existing groups",
        "description": "",
        "operationId": "groupsGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "adds a new group",
        "description": "",
        "operationId": "groupsPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupCreate"
            }
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/groups/{groupId}": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "retrieves an existing group",
        "description": "",
        "operationId": "groupsGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "put": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "updates an existing group",
        "description": "",
        "operationId": "groupsPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/GroupUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "removes an existing group",
        "description": "",
        "operationId": "groupsDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "patch": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "updates an existing group",
        "description": "",
        "operationId": "groupsActivate",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/groups/{groupId}/users/{userId}": {
      "put": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "updates an existing group",
        "description": "",
        "operationId": "groupsUsersPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "updates an existing group",
        "description": "",
        "operationId": "groupsUsersDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "path",
            "description": "user identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/groups/{groupId}/users": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "retrieves all users of a group",
        "description": "",
        "operationId": "groupsUsersGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/solutions": {
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "installs a solution",
        "description": "",
        "operationId": "installSolution",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "attachment file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/license": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "retrieves license information",
        "description": "",
        "operationId": "licenseGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/License"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "stores the license key",
        "description": "",
        "operationId": "licensePost",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "licenseKey",
            "in": "formData",
            "description": "license key",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/templates/{templateId}/attributes": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "fetches attribute information",
        "description": "",
        "operationId": "attributesGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attribute"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "adds a new attribute",
        "description": "",
        "operationId": "attributesPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AttributeCreate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/templates/{templateId}/attributes/{attributeId}": {
      "get": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "fetches attribute information",
        "description": "",
        "operationId": "attributesGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "put": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "update an existing attribute",
        "description": "",
        "operationId": "attributesPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService idenitifer",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AttributeUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "removes an attribute",
        "description": "",
        "operationId": "attributesDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/templates/{templateId}/attributes/{attributeId}/defaultvalue": {
      "put": {
        "tags": [
          "Fidelia Application Admin"
        ],
        "summary": "sets the enumeration default value key",
        "description": "",
        "operationId": "attributesEnumerationValuePutDefault",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "templateService identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "attribute identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DefaultValue"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}/nodes": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches a list of nodes",
        "description": "",
        "operationId": "nodesGetMulti",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "idList",
            "in": "query",
            "description": "id list",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Node"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a new node",
        "description": "",
        "operationId": "nodesAdd",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NodeCreate"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header",
            "schema": {
              "$ref": "#/definitions/NodeKey"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}/nodes/{nodeId}": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches node information",
        "description": "",
        "operationId": "nodesGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "withTraces",
            "in": "query",
            "description": "with traces",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "updates a node",
        "description": "",
        "operationId": "nodesPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NodeUpdate"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "removes a node",
        "description": "",
        "operationId": "nodesDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "task identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "412": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/tasks/{taskId}": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches task information",
        "description": "",
        "operationId": "tasksGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "task identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "updates a task",
        "description": "",
        "operationId": "tasksPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "task identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TaskUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/ping": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "intended to allow connection checks",
        "description": "",
        "operationId": "ping",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/PingResponse"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/folders/{folderId}/readers/{entity}/{id}": {
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a folder reader",
        "description": "",
        "operationId": "foldersReadersPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "removes a folder reader",
        "description": "",
        "operationId": "foldersReadersDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/folders/{folderId}/readers": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches folder readers",
        "description": "",
        "operationId": "foldersReadersGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityObject"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches sheet details",
        "description": "",
        "operationId": "sheetsGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/Sheet"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "moves a sheet",
        "description": "",
        "operationId": "sheetsPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SheetUpdate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "removes a sheet",
        "description": "",
        "operationId": "sheetsDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/owners/{entity}/{id}": {
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a sheet owner",
        "description": "",
        "operationId": "sheetsOwnersPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "removes a sheet owner",
        "description": "",
        "operationId": "sheetsOwnersDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/owners": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches sheet owners",
        "description": "",
        "operationId": "sheetOwnersGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityObject"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/writers/{entity}/{id}": {
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a sheet writer",
        "description": "",
        "operationId": "sheetsWritersPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "removes a sheet writer",
        "description": "",
        "operationId": "sheetsWritersDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/writers": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches sheet writers",
        "description": "",
        "operationId": "sheetWritersGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityObject"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches sheet structure information",
        "description": "",
        "operationId": "nodesGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeStructure"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "post": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches filtered and sorted sheet structure information",
        "description": "",
        "operationId": "nodesPostFiltered",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Filtering"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeStructure"
              }
            }
          },
          "503": {
            "description": "Index service not available. Search, filter or sort operations are currently not possible"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}/nodes/{nodeId}/reference": {
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "moves a node",
        "description": "",
        "operationId": "nodesPutReference",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NodeReference"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}/nodes/{nodeId}/level": {
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "changes the node level",
        "description": "",
        "operationId": "nodesPutLevel",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NodeLevel"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/folders": {
      "post": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a new folder",
        "description": "",
        "operationId": "foldersPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/FolderCreate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header",
            "schema": {
              "$ref": "#/definitions/FolderKey"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/folders/{folderId}": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches folder information",
        "description": "",
        "operationId": "foldersGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/Folder"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/folders/{folderId}/owners/{entity}/{id}": {
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a folder owner",
        "description": "",
        "operationId": "foldersOwnersPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "removes a folder owner",
        "description": "",
        "operationId": "foldersOwnersDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/folders/{folderId}/owners": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches folder owners",
        "description": "",
        "operationId": "foldersOwnersGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityObject"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/folders/{folderId}/writers/{entity}/{id}": {
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a folder writers",
        "description": "",
        "operationId": "foldersWritersPut",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "409": {
            "description": "resource already exists"
          },
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "removes a folder writers",
        "description": "",
        "operationId": "foldersWritersDelete",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity",
            "in": "path",
            "description": "security entity",
            "required": true,
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "user/group identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/folders/{folderId}/writers": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches folder writers",
        "description": "",
        "operationId": "foldersWritersGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "folder identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SecurityObject"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}/nodes/{nodeId}/attachments": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches node attachment information",
        "description": "",
        "operationId": "attachmentsGetAll",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}/nodes/{nodeId}/attachments/{attachmentName}": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches attachment content",
        "description": "",
        "operationId": "attachmentsGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "attachmentName",
            "in": "path",
            "description": "attachment name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "file"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      },
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "puts attachment content",
        "description": "",
        "operationId": "attachmentsPut",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string",
            "x-example": "fg15jh78aQ"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string",
            "x-example": "ff5giy"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string",
            "x-example": "1"
          },
          {
            "name": "attachmentName",
            "in": "path",
            "description": "attachment name",
            "required": true,
            "type": "string",
            "x-example": "smile.jpg"
          },
          {
            "name": "taskId",
            "in": "query",
            "description": "task identifier",
            "required": true,
            "type": "string",
            "x-example": "a65bbg5"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "attachment file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}/nodes/{nodeId}/traces/{traceId}": {
      "post": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a new node trace",
        "description": "",
        "operationId": "tracesPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "traceId",
            "in": "path",
            "description": "trace identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NodeTraceCreate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}/nodes/{nodeId}/traces": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "fetches node trace information",
        "description": "",
        "operationId": "tracesGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "description": "sheet identifier",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "description": "sheet version",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "description": "sheet mode",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "nodeId",
            "in": "path",
            "description": "node identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/NodeTrace"
              }
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/sheets": {
      "post": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a new sheet",
        "description": "",
        "operationId": "sheetsPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SheetCreate"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header",
            "schema": {
              "$ref": "#/definitions/SheetKey"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/tasks": {
      "post": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "adds a new task",
        "description": "",
        "operationId": "tasksPost",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TaskUpdate"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "201": {
            "description": "new resource created, uri returned in location path header",
            "schema": {
              "$ref": "#/definitions/TaskKey"
            }
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/tasks/open": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "Get open tasks",
        "description": "Get all open tasks where the current user is either owner or a assigned user",
        "operationId": "myTasksGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the current search",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional filters.\nFormat [filterField]:[filterValue[,.....]] where filterField is one of the following fields:\nid, summary, externalId, owner, writer, reviewer, folderId",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/TaskSearch"
            }
          },
          "503": {
            "description": "Index service not available. Search, filter or sort operations are currently not possible"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/tasks/reviews": {
      "get": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "Get tasks in review",
        "description": "Get all tasks in review where the current user is assigned as reviewer",
        "operationId": "myReviewsGet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "Offset of the current search",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Optional filters.\nFormat [filterField]:[filterValue[,....]] where filterField is one of the following fields:\nid, summary, externalId, owner, writer, reviewer, folderId",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "404": {
            "description": "requested resource not found",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "200": {
            "description": "success with response",
            "schema": {
              "$ref": "#/definitions/TaskSearch"
            }
          },
          "503": {
            "description": "Index service not available. Search, filter or sort operations are currently not possible"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/tasks/{taskId}/workflow": {
      "put": {
        "tags": [
          "Fidelia Application"
        ],
        "summary": "changes the task status",
        "description": "",
        "operationId": "tasksPutWorkflow",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "task identifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/TaskWorkflow"
            }
          }
        ],
        "responses": {
          "412": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "400": {
            "description": "request parameters/body is invalid, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "204": {
            "description": "success without response"
          },
          "500": {
            "description": "server reports an error, check response body/entity for details",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "you are not authorized for this operation"
          }
        }
      }
    },
    "/v1/aggregation/sheets/{sheetId}/versions/{sheetVersion}/modes/{sheetMode}/attributes": {
      "post": {
        "tags": [
          "Index"
        ],
        "summary": "Fetches sheet filter aggregations",
        "description": "Get filtered aggregations for the given attributes",
        "operationId": "getSheetFilteredAggregation",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "attributeId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Filtering"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all aggregations",
            "schema": {
              "$ref": "#/definitions/SheetAggregationResponse"
            }
          },
          "403": {
            "description": "No permissions to retrieve aggregations for this sheet",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/aggregation/folders/{folderId}/modes/{sheetMode}/attributes": {
      "post": {
        "tags": [
          "Index"
        ],
        "summary": "Fetches folder filter aggregations",
        "description": "Get filtered aggregations for the given attributes",
        "operationId": "getFolderFilteredAggregation",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetMode",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "attributeId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "in": "body",
            "name": "body",
            "description": "input",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Filtering"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned all aggregations",
            "schema": {
              "$ref": "#/definitions/SheetAggregationResponse"
            }
          },
          "403": {
            "description": "No permissions to retrieve aggregations for this folder",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/indices/user": {
      "put": {
        "tags": [
          "Index"
        ],
        "summary": "Populate/refresh user index",
        "description": "Populate/refresh data from the user index",
        "operationId": "refreshUserIndex",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully populated/refreshed data"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "417": {
            "description": "No task index service available",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/indices/group": {
      "put": {
        "tags": [
          "Index"
        ],
        "summary": "Populate/refresh group index",
        "description": "Populate/refresh data from the group index",
        "operationId": "refreshGroupIndex",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully populated/refreshed data"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "417": {
            "description": "No task index service available",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/indices/task": {
      "put": {
        "tags": [
          "Index"
        ],
        "summary": "Populate/refresh task index",
        "description": "Populate/refresh data from the task index",
        "operationId": "refreshTaskIndex",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully populated/refreshed data"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "417": {
            "description": "No task index service available",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/indices/sheet": {
      "put": {
        "tags": [
          "Index"
        ],
        "summary": "Populate/refresh sheet index",
        "description": "Populate/refresh data from the sheet index",
        "operationId": "refreshSheetIndex",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully populated/refreshed data"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "417": {
            "description": "No task index service available"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/indices/sheet/{sheetId}/{sheetVersion}": {
      "put": {
        "tags": [
          "Index"
        ],
        "summary": "Populate/refresh a sheet in the index",
        "description": "Populate/refresh data from a sheet in the index",
        "operationId": "refreshSheet",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "sheetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sheetVersion",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully populated/refreshed data"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "417": {
            "description": "No task index service available"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/indices/folder/{folderId}": {
      "put": {
        "tags": [
          "Index"
        ],
        "summary": "Populate/refresh a folder and all of its sheet in the index",
        "description": "Populate/refresh data from a folder and all its sheets in the index",
        "operationId": "refreshFolder",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully populated/refreshed data"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "417": {
            "description": "No task index service available"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/indices/config": {
      "put": {
        "tags": [
          "Index"
        ],
        "summary": "Populate/refresh config index",
        "description": "Populate/refresh data from the config index",
        "operationId": "refreshConfigIndex",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully populated/refreshed data"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "417": {
            "description": "No config index service available"
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/server/log/config": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Retrieve log config",
        "description": "Get the log config for the domain logging context",
        "operationId": "getLogConfig",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LogConfigResponse"
            }
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Internal"
        ],
        "summary": "Set log level",
        "description": "Set a log level for a logger of domain logger context",
        "operationId": "setLogLevel",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "Name of the logger",
            "required": false,
            "type": "string",
            "x-example": "com.agosense.fidelia"
          },
          {
            "name": "level",
            "in": "formData",
            "description": "New level for the logger",
            "required": false,
            "type": "string",
            "x-example": "WARN",
            "enum": [
              "OFF",
              "ERROR",
              "WARN",
              "INFO",
              "DEBUG",
              "TRACE",
              "ALL"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/log": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Retrieve log entries",
        "description": "Get the last log entries of the domain logger context",
        "operationId": "getLog",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LogEntriesResponse"
            }
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/log/files": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Retrieve log files",
        "description": "Get all log files of the domain and default logging context",
        "operationId": "getLogFiles",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LogEntriesResponse"
            }
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/status": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Retrieve domain status",
        "description": "Get the current status of the domain",
        "operationId": "getStatus",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/ServerStatusResponse"
            }
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/license/float": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Get current float license users",
        "description": "Get all users that are using float license at the moment",
        "operationId": "getUsersWithFloatLicense",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/heap/dump": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Create a heap dump",
        "description": "Create a heap dump in the temp folder",
        "operationId": "createHeapDump",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/thread/dump": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Create a thread dump",
        "description": "Create a thread dump of all currently running therads",
        "operationId": "createThreadDump",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/thread/deadlock": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Create a thread dump",
        "description": "Create a thread dump of all currently running therads",
        "operationId": "createThreadDeadlockDump",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/license/seat": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Get current seat license users",
        "description": "Get all users that are using seat license at the moment",
        "operationId": "getUsersWithSeatLicense",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/license/none": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Get current no license users",
        "description": "Get all users that are using no license at the moment",
        "operationId": "getUsersWithNoneLicense",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/version": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Retrieve bundle versions",
        "description": "Get the current versions of all installed bundles",
        "operationId": "getBundleVersions",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/log/config/default": {
      "get": {
        "tags": [
          "Internal"
        ],
        "summary": "Retrieve log config",
        "description": "Get the log config for the default logging context",
        "operationId": "getDefaultLogConfig",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LogConfigResponse"
            }
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "put": {
        "tags": [
          "Internal"
        ],
        "summary": "Set log level",
        "description": "Set a log level for a logger of default logger context",
        "operationId": "setDefaultLogLevel",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "formData",
            "description": "Name of the logger",
            "required": false,
            "type": "string",
            "x-example": "com.agosense.fidelia"
          },
          {
            "name": "level",
            "in": "formData",
            "description": "New level for the logger",
            "required": false,
            "type": "string",
            "x-example": "WARN",
            "enum": [
              "OFF",
              "ERROR",
              "WARN",
              "INFO",
              "DEBUG",
              "TRACE",
              "ALL"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/log/config/reload": {
      "put": {
        "tags": [
          "Internal"
        ],
        "summary": "Reload domain logger context configuration",
        "description": "Reload configuration for domain logger context",
        "operationId": "reloadLogConfig",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/server/log/config/default/reload": {
      "put": {
        "tags": [
          "Internal"
        ],
        "summary": "Reload default logger context configuration",
        "description": "Reload configuration for default logger context",
        "operationId": "reloadDefaultLogConfig",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/v1/authentication/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Invalidate a API token",
        "description": "Invalidate a API token",
        "operationId": "logout",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "formData",
            "description": "API token",
            "required": false,
            "type": "string",
            "x-example": "6a28f022-745a-4a87-9733-8118946f6b5a-a9b668f7-504d-4400-bfdf-406f729f8cca"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "REST endpoint could not be reached"
          }
        }
      }
    },
    "/v1/authentication/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Retrieve a API token",
        "description": "Retrieve a new API Token",
        "operationId": "login",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "user",
            "in": "formData",
            "description": "User name",
            "required": false,
            "type": "string",
            "x-example": "mmeier"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password of the user",
            "required": false,
            "type": "string",
            "format": "password",
            "x-example": "*******"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "REST endpoint could not be reached"
          },
          "406": {
            "description": "Missing parameters"
          }
        }
      }
    },
    "/v1/templates/folderactions/{actionId}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get folder action",
        "description": "Get a single folder action definition",
        "operationId": "getAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "ID of the action",
            "required": true,
            "type": "string",
            "x-example": "a621658e-3af8-11e7-a919-92ebcb67fe33"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful returned folder action definition",
            "schema": {
              "$ref": "#/definitions/FolderActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Actions"
        ],
        "summary": "Edit folder action",
        "description": "Edit a exsiting folder action",
        "operationId": "editAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "ID of the action",
            "required": true,
            "type": "string",
            "x-example": "a621658e-3af8-11e7-a919-92ebcb67fe33"
          },
          {
            "in": "body",
            "name": "body",
            "description": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditFolderActionDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull added the report",
            "schema": {
              "$ref": "#/definitions/FolderActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Actions"
        ],
        "summary": "Remove folder action",
        "description": "Remove a folder action",
        "operationId": "removeAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "actionId",
            "in": "path",
            "description": "ID of the action",
            "required": true,
            "type": "string",
            "x-example": "a621658e-3af8-11e7-a919-92ebcb67fe33"
          }
        ],
        "responses": {
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/folderactions": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get folder actions",
        "description": "Get all folder actions of a template",
        "operationId": "getActions",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Succesful returned all views",
            "schema": {
              "$ref": "#/definitions/FolderActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Create folder action",
        "description": "Create a new folder action",
        "operationId": "addAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateFolderActionDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull added the report",
            "schema": {
              "$ref": "#/definitions/FolderActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/folderactions/ping": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Ping",
        "description": "returns a fortune to verify availability of the api",
        "operationId": "ping",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/nodeactions/{actionId}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get node action",
        "description": "Get a single node action definition",
        "operationId": "getAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "ID of the action",
            "required": true,
            "type": "string",
            "x-example": "a621658e-3af8-11e7-a919-92ebcb67fe33"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful returned folder action definition",
            "schema": {
              "$ref": "#/definitions/NodeActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Actions"
        ],
        "summary": "Edit node action",
        "description": "Edit a existing node action definition",
        "operationId": "editAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "ID of the action",
            "required": true,
            "type": "string",
            "x-example": "a621658e-3af8-11e7-a919-92ebcb67fe33"
          },
          {
            "in": "body",
            "name": "body",
            "description": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditNodeActionDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull edited the node action",
            "schema": {
              "$ref": "#/definitions/NodeActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Actions"
        ],
        "summary": "Remove node action",
        "description": "Remove a existing node action",
        "operationId": "removeAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "ID of the action",
            "required": true,
            "type": "string",
            "x-example": "a621658e-3af8-11e7-a919-92ebcb67fe33"
          }
        ],
        "responses": {
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/nodeactions": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get node actions",
        "description": "Get all node action definitions of a template",
        "operationId": "getActions",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful returned all node actions",
            "schema": {
              "$ref": "#/definitions/NodeActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Create node action",
        "description": "Create a new node action",
        "operationId": "addAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "in": "body",
            "name": "body",
            "description": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNodeActionDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull added the node action",
            "schema": {
              "$ref": "#/definitions/NodeActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/nodeactions/ping": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Ping",
        "description": "returns a fortune to verify availability of the api",
        "operationId": "ping",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/sheetactions/{actionId}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get sheet action",
        "description": "Get a single sheet action definition",
        "operationId": "getAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "ID of the action",
            "required": true,
            "type": "string",
            "x-example": "a621658e-3af8-11e7-a919-92ebcb67fe33"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful returned folder action definition",
            "schema": {
              "$ref": "#/definitions/SheetActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Actions"
        ],
        "summary": "Edit sheet action",
        "description": "Edit a existing sheet action definition",
        "operationId": "editAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "ID of the action",
            "required": true,
            "type": "string",
            "x-example": "a621658e-3af8-11e7-a919-92ebcb67fe33"
          },
          {
            "in": "body",
            "name": "body",
            "description": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EditSheetActionDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull edited the sheet action",
            "schema": {
              "$ref": "#/definitions/SheetActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Actions"
        ],
        "summary": "Remove sheet action",
        "description": "Remove a existing sheet action definition",
        "operationId": "removeAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "ID of the action",
            "required": true,
            "type": "string",
            "x-example": "a621658e-3af8-11e7-a919-92ebcb67fe33"
          }
        ],
        "responses": {
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/sheetactions": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Get sheet actions",
        "description": "Get all sheet action definitions of a template",
        "operationId": "getActions",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "Template id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful returned all sheet actions",
            "schema": {
              "$ref": "#/definitions/SheetActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Create sheet action",
        "description": "Create a new sheet action definition",
        "operationId": "addAction",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "in": "body",
            "name": "body",
            "description": "payload",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSheetActionDefinitionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull added the sheet action",
            "schema": {
              "$ref": "#/definitions/SheetActionDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/sheetactions/ping": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Ping",
        "description": "returns a fortune to verify availability of the api",
        "operationId": "ping",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/dashboards/{id}/modes/{mode}": {
      "get": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Get dashboard definition",
        "description": "Returns the dashboard definition of the requested dashboard name",
        "operationId": "getDashboard",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template to which the requested dashboard definition belongs to",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the dashboard that should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "8fd751db-a9b6-4b15-966d-05c16dd28cbd"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the dashboard that should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved dashboard definition",
            "schema": {
              "$ref": "#/definitions/DashboardDefinitionResponse"
            }
          },
          "400": {
            "description": "Input parameter(s) is not valid",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "No permissions to retrieve the dashboard definition",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The requested information does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "412": {
            "description": "Parameter validation error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Edit a dashboard definition",
        "description": "Edit a dashboard definition",
        "operationId": "editDashboard",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the report definition should be edited",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode where the report definition should be edited",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the dashboard definition that should be edited",
            "required": true,
            "type": "string",
            "x-example": "8fd751db-a9b6-4b15-966d-05c16dd28cbd"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "BIRT report definition file (rptdesign)",
            "required": true,
            "type": "file"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Name of the dashboard definition",
            "required": false,
            "type": "string",
            "x-example": "Monthly Milestone Overview"
          },
          {
            "name": "width",
            "in": "formData",
            "description": "Width of the dashboard window in pixel",
            "required": false,
            "type": "integer",
            "x-example": 800
          },
          {
            "name": "height",
            "in": "formData",
            "description": "Height of the dashboard window in pixel",
            "required": false,
            "type": "integer",
            "x-example": 600
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully edited the report",
            "schema": {
              "$ref": "#/definitions/DashboardDefinitionResponse"
            }
          },
          "400": {
            "description": "Input parameter(s) is not valid",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "No permissions to edit the report definition",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The requested information does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "412": {
            "description": "Parameter validation error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Remove a dashboard definition",
        "description": "Remove a dashboard definition from a template",
        "operationId": "deleteDashboard",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template to which the dashboard definition belongs to",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the dashboard definition that should be removed",
            "required": true,
            "type": "string",
            "x-example": "8fd751db-a9b6-4b15-966d-05c16dd28cbd"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode where the dashboard definition should be removed",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the report definition from the template"
          },
          "403": {
            "description": "No permissions to remove the report definition",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/dashboards": {
      "get": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Get all dashboard definitions",
        "description": "Returns all dashboard definitions of the requested template id",
        "operationId": "getDashboards",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template for which all dashboard definitions should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all dashboard definitions for the given template id",
            "schema": {
              "$ref": "#/definitions/ReportDefinitionsResponse"
            }
          },
          "403": {
            "description": "No permissions to retrieve dashboard definitions for this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Create a new dashboard definition",
        "description": "Create a new dashboard definition and add it to the template",
        "operationId": "addDashboard",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the dashboard definition should be created",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "Sheet mode where the dashboard definition should be added",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "BIRT report definition file (rptdesign)",
            "required": true,
            "type": "file"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Name of the dashboard definition",
            "required": true,
            "type": "string",
            "x-example": "Milestone Dashboard"
          },
          {
            "name": "width",
            "in": "formData",
            "description": "Width of the dashboard window in pixel",
            "required": false,
            "type": "integer",
            "x-example": 800
          },
          {
            "name": "height",
            "in": "formData",
            "description": "Height of the dashboard window in pixel",
            "required": false,
            "type": "integer",
            "x-example": 600
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a new dashboard definition",
            "schema": {
              "$ref": "#/definitions/DashboardDefinitionResponse"
            }
          },
          "400": {
            "description": "Input parameter(s) is not valid",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "No permissions to add a new dashboard definition",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The requested information does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "406": {
            "description": "Limit of allowed dashboard definitions reached",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Dashboard with same name already exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/dashboards/{id}/modes/{mode}/file": {
      "get": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Get the dashboard definition file",
        "description": "Returns the BIRT report definition file (rptdesign) of a dashboard",
        "operationId": "getDashboardFile",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template to which the requested dashboard definition belongs",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the dashboard definition",
            "required": true,
            "type": "string",
            "x-example": "8fd751db-a9b6-4b15-966d-05c16dd28cbd"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the dashboard definition that should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the report definition file"
          },
          "400": {
            "description": "Input parameter(s) is not valid",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "No permissions to retrieve the report definition file",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The requested information does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/dashboards/ping": {
      "get": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Ping REST Endpoint",
        "description": "Check if REST endpoint is reachable",
        "operationId": "ping",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully connected to REST endpoint",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "REST endpoint could not be reached"
          }
        }
      }
    },
    "/v1/templates/{templateId}/reports/{id}/modes/{mode}/file": {
      "get": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Get the report definition file",
        "description": "Returns the BIRT report definition file (rptdesign) of a report",
        "operationId": "getReportFile",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template to which the requested report definition belongs",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the report",
            "required": true,
            "type": "string",
            "x-example": "e92edfed-e4e9-47d5-94e2-597bc9fb7fc3"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the report definition that should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the report definition file"
          },
          "400": {
            "description": "Input parameter(s) is not valid",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "No permissions to retrieve the report definition file",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The requested information does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/reports/{id}/modes/{mode}": {
      "get": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Get report definition",
        "description": "Returns the report definition of the requested report name",
        "operationId": "getReport",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template to which the requested report definition belongs",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the report that should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "e92edfed-e4e9-47d5-94e2-597bc9fb7fc3"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the report that should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved report definition",
            "schema": {
              "$ref": "#/definitions/ReportDefinitionResponse"
            }
          },
          "400": {
            "description": "Input parameter(s) is not valid",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "No permissions to retrieve the report definition",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The requested information does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "412": {
            "description": "Parameter validation error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Edit a report definition",
        "description": "Edit a existing report definition",
        "operationId": "editReport",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the report definition should be edited",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode where the report definition should be edited",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the report definition that should be edited",
            "required": true,
            "type": "string",
            "x-example": "e92edfed-e4e9-47d5-94e2-597bc9fb7fc3"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "BIRT report definition file (rptdesign)",
            "required": true,
            "type": "file"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Name of the report definition",
            "required": false,
            "type": "string",
            "x-example": "PDF with printable TOC (only for internal use)"
          },
          {
            "name": "separatedRunAndRender",
            "in": "formData",
            "description": "Use separated task for report generation",
            "required": false,
            "type": "boolean",
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully edited the report",
            "schema": {
              "$ref": "#/definitions/ReportDefinitionResponse"
            }
          },
          "400": {
            "description": "Input parameter(s) is not valid",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "No permissions to edit the report definition",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The requested information does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "412": {
            "description": "Parameter validation error",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Remove a report definition",
        "description": "Remove a report definition from a template",
        "operationId": "deleteReport",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template to which the report definition belongs to",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the report definition that should be removed",
            "required": true,
            "type": "string",
            "x-example": "e92edfed-e4e9-47d5-94e2-597bc9fb7fc3"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode where the report definition should be removed",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed the report definition from the template"
          },
          "403": {
            "description": "No permissions to remove the report definition",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/reports": {
      "get": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Get all report definitions",
        "description": "Returns all report definitions of the requested template id",
        "operationId": "getReports",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template for which all report definitions should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all report definitions for the given template id",
            "schema": {
              "$ref": "#/definitions/ReportDefinitionsResponse"
            }
          },
          "403": {
            "description": "No permissions to retrieve report definitions for this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Create a new report definition",
        "description": "Create a new report definition and add it to the template",
        "operationId": "addReport",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the report definition should be created",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "mode",
            "in": "formData",
            "description": "Sheet mode where the report definition should be added",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "file",
            "in": "formData",
            "description": "BIRT report definition file (rptdesign)",
            "required": true,
            "type": "file"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Name of the report definition",
            "required": true,
            "type": "string",
            "x-example": "PDF with TOC"
          },
          {
            "name": "format",
            "in": "formData",
            "description": "Target format of the report",
            "required": true,
            "type": "string",
            "x-example": "PDF",
            "enum": [
              "HTML",
              "PDF",
              "XLSX"
            ]
          },
          {
            "name": "separatedRunAndRender",
            "in": "formData",
            "description": "Use separated task for report generation",
            "required": false,
            "type": "boolean",
            "x-example": "false"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a new report definition",
            "schema": {
              "$ref": "#/definitions/ReportDefinitionResponse"
            }
          },
          "400": {
            "description": "Input parameter(s) is not valid",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "403": {
            "description": "No permissions to add a new report definition",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "404": {
            "description": "The requested information does not exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "406": {
            "description": "Limit of allowed report definitions reached",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "409": {
            "description": "Report with same name already exist",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/reports/ping": {
      "get": {
        "tags": [
          "Report Templates"
        ],
        "summary": "Ping REST Endpoint",
        "description": "Check if REST endpoint is reachable",
        "operationId": "ping",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully connected to REST endpoint",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "REST endpoint could not be reached"
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/types/{gridType}/columns/attribute": {
      "post": {
        "tags": [
          "View Templates"
        ],
        "summary": "Add attribute column",
        "description": "Add a new attribute column to the view of the given sheet mode",
        "operationId": "addAttributeColumn",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the attribute column should be added",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "gridType",
            "in": "path",
            "description": "Type of the grid",
            "required": true,
            "type": "string",
            "x-example": "CONTENT",
            "enum": [
              "OUTLINE",
              "CONTENT"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "Column data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateAttributeViewColumnRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful added the attribute to the view",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionDetailsResponse"
            }
          },
          "403": {
            "description": "No permissions to add a view column to this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/default": {
      "put": {
        "tags": [
          "View Templates"
        ],
        "summary": "Set default view",
        "description": "Set a default view for the given sheet mode",
        "operationId": "setDefaultView",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the default view should be set",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful set default view",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions to set the default view",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/types/{gridType}/columns": {
      "post": {
        "tags": [
          "View Templates"
        ],
        "summary": "Add view column",
        "description": "Add a new column to the view of the given sheet mode",
        "operationId": "addColumn",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the column should be added",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "gridType",
            "in": "path",
            "description": "Type of the grid",
            "required": true,
            "type": "string",
            "x-example": "CONTENT",
            "enum": [
              "OUTLINE",
              "CONTENT"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "View data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateViewColumnRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful added the column to the view",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionDetailsResponse"
            }
          },
          "403": {
            "description": "No permissions to add a view column to this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/types/{gridType}/columns/{columnId}": {
      "put": {
        "tags": [
          "View Templates"
        ],
        "summary": "Edit column",
        "description": "Edit a column in the view",
        "operationId": "editColumn",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template of the column that should be edited",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "gridType",
            "in": "path",
            "description": "Type of the grid",
            "required": true,
            "type": "string",
            "x-example": "CONTENT",
            "enum": [
              "OUTLINE",
              "CONTENT"
            ]
          },
          {
            "name": "columnId",
            "in": "path",
            "description": "Column ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "payload",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EditViewColumnRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful edited the column",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionDetailsResponse"
            }
          },
          "403": {
            "description": "No permissions to edit column",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/types/{gridType}/columns/{column}/move/{referenceColumn}": {
      "put": {
        "tags": [
          "View Templates"
        ],
        "summary": "Move column",
        "description": "Move a column",
        "operationId": "moveColumn",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the column should be moved",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "gridType",
            "in": "path",
            "description": "Type of the grid",
            "required": true,
            "type": "string",
            "x-example": "CONTENT",
            "enum": [
              "OUTLINE",
              "CONTENT"
            ]
          },
          {
            "name": "column",
            "in": "path",
            "description": "Id of the column",
            "required": true,
            "type": "string"
          },
          {
            "name": "referenceColumn",
            "in": "path",
            "description": "Id of the column after which the attribute should be moved",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful moved the attribute column",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionDetailsResponse"
            }
          },
          "403": {
            "description": "No permissions to move a column in this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/types/{gridType}/columns/{column}/move": {
      "put": {
        "tags": [
          "View Templates"
        ],
        "summary": "Move column",
        "description": "Move a column",
        "operationId": "moveColumn",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the column should be moved",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "gridType",
            "in": "path",
            "description": "Type of the grid",
            "required": true,
            "type": "string",
            "x-example": "CONTENT",
            "enum": [
              "OUTLINE",
              "CONTENT"
            ]
          },
          {
            "name": "column",
            "in": "path",
            "description": "Id of the column",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful moved the attribute column",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionDetailsResponse"
            }
          },
          "403": {
            "description": "No permissions to move a column in this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}": {
      "get": {
        "tags": [
          "View Templates"
        ],
        "summary": "List view",
        "description": "List all details of a view",
        "operationId": "getView",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template for which the view should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful returned view",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionDetailsResponse"
            }
          },
          "403": {
            "description": "No permissions to retrieve view definitions for this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "put": {
        "tags": [
          "View Templates"
        ],
        "summary": "Edit view",
        "description": "Edit a view for the given sheet mode",
        "operationId": "editView",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the  view should be edited",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "Data of the view",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EditViewRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful set default view",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions to set the default view",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "View Templates"
        ],
        "summary": "Remove view",
        "description": "Remove a view in the given sheet mode",
        "operationId": "removeView",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the view should be removed",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful removed the view"
          },
          "403": {
            "description": "No permissions to remove a view from this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/types/{gridType}/columns/{columnName}": {
      "delete": {
        "tags": [
          "View Templates"
        ],
        "summary": "Remove column",
        "description": "Remove a column",
        "operationId": "removeColumn",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the column should be removed",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "gridType",
            "in": "path",
            "description": "Type of the grid",
            "required": true,
            "type": "string",
            "x-example": "CONTENT",
            "enum": [
              "OUTLINE",
              "CONTENT"
            ]
          },
          {
            "name": "columnName",
            "in": "path",
            "description": "Column id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful removed the form column from the view",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionDetailsResponse"
            }
          },
          "403": {
            "description": "No permissions to remove a view column from this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/types/{gridType}/columns/trace": {
      "post": {
        "tags": [
          "View Templates"
        ],
        "summary": "Add trace column",
        "description": "Add a new trace column to the view of the given sheet mode",
        "operationId": "addTraceColumn",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the attribute column should be added",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "Column data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateTraceViewColumnRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful added the attribute to the view",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionDetailsResponse"
            }
          },
          "403": {
            "description": "No permissions to add a view column to this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/types/{gridType}/columns/forms": {
      "post": {
        "tags": [
          "View Templates"
        ],
        "summary": "Add form column",
        "description": "Add a new form column to the view",
        "operationId": "addFormColumn",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the form column should be added",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "gridType",
            "in": "path",
            "description": "Type of the grid",
            "required": true,
            "type": "string",
            "pattern": "[Cc][Oo][Nn][Tt][Ee][Nn][Tt]",
            "x-example": "CONTENT",
            "enum": [
              "OUTLINE",
              "CONTENT"
            ]
          },
          {
            "in": "body",
            "name": "body",
            "description": "Column data",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateDynamicFormViewColumnRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful added the form column to the view",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionDetailsResponse"
            }
          },
          "403": {
            "description": "No permissions to add a view column to this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/{id}/modes/{mode}/types/{gridType}/columns/{column}/autoexpand": {
      "put": {
        "tags": [
          "View Templates"
        ],
        "summary": "Set autoexpand column",
        "description": "Set autoexpand column",
        "operationId": "setAutoExpandColumn",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the autoexpand column should be configured",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the view",
            "required": true,
            "type": "string",
            "x-example": "e1b894e5-20e6-4629-80bb-9ba97547a12c"
          },
          {
            "name": "mode",
            "in": "path",
            "description": "Sheet mode of the view",
            "required": true,
            "type": "string",
            "x-example": "BASE",
            "enum": [
              "BASE",
              "TENTATIVE"
            ]
          },
          {
            "name": "gridType",
            "in": "path",
            "description": "Type of the grid",
            "required": true,
            "type": "string",
            "x-example": "CONTENT",
            "enum": [
              "OUTLINE",
              "CONTENT"
            ]
          },
          {
            "name": "column",
            "in": "path",
            "description": "Id of the autoexpand column",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful set autoexpand column",
            "schema": {
              "$ref": "#/definitions/ColumnDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions to set autoexpand column of this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views": {
      "get": {
        "tags": [
          "View Templates"
        ],
        "summary": "List views",
        "description": "List all views of the template",
        "operationId": "getViews",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template for which all views should be retrieved",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful returned all views",
            "schema": {
              "$ref": "#/definitions/ViewsResponse"
            }
          },
          "403": {
            "description": "No permissions to retrieve view definitions for this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      },
      "post": {
        "tags": [
          "View Templates"
        ],
        "summary": "Add view",
        "description": "Add a new view for the given sheet mode",
        "operationId": "addView",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of the template where the view should be added",
            "required": true,
            "type": "string",
            "x-example": "4f010ed2-319b-11e7-93ae-92361f002671"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Data of the new view",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CreateViewRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesful added the view",
            "schema": {
              "$ref": "#/definitions/ViewDefinitionResponse"
            }
          },
          "403": {
            "description": "No permissions to add a view to this template",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          },
          "500": {
            "description": "Fatal error while processing the request",
            "schema": {
              "$ref": "#/definitions/RestException"
            }
          }
        }
      }
    },
    "/v1/templates/{templateId}/views/ping": {
      "get": {
        "tags": [
          "View Templates"
        ],
        "summary": "ping",
        "description": "Check if the templates.view REST endpoint is available",
        "operationId": "ping",
        "consumes": [
          "application/json;charset=utf-8"
        ],
        "produces": [
          "application/json;charset=utf-8"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "REST endpoint could not be reached"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "auth": {
      "type": "apiKey",
      "name": "API-TOKEN",
      "in": "header"
    },
    "basicAuth": {
      "description": "Important: BASIC Authentication is deprecated and will be removed in release 1.8.12",
      "type": "basic"
    }
  },
  "definitions": {
    "RestException": {
      "type": "object",
      "required": [
        "args",
        "className",
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "description": "Message of the exception.",
          "readOnly": true
        },
        "className": {
          "type": "string",
          "example": "com.agosense.fidelia.core.exceptions.CoreException",
          "description": "Class name of the exception.",
          "readOnly": true
        },
        "args": {
          "type": "array",
          "example": "['ff']",
          "description": "Arguments of the exceptions",
          "readOnly": true,
          "items": {
            "type": "object"
          }
        }
      },
      "description": "Error response object that contains all information about the error"
    },
    "UserUpdate": {
      "type": "object",
      "required": [
        "displayName",
        "emailAddress",
        "isExternal"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "isExternal": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "EdgeUpdate": {
      "type": "object",
      "required": [
        "expressionEnd",
        "expressionStart"
      ],
      "properties": {
        "expressionStart": {
          "type": "string"
        },
        "expressionEnd": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "isExternal": {
          "type": "boolean"
        },
        "isActive": {
          "type": "boolean"
        },
        "uri": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "EnumerationValue": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "EnumerationValueRuleUpdate": {
      "type": "object",
      "required": [
        "expression",
        "keys"
      ],
      "properties": {
        "expression": {
          "type": "string"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EnumerationValueRule": {
      "type": "object",
      "required": [
        "expression",
        "keys"
      ],
      "properties": {
        "expression": {
          "type": "string"
        },
        "keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "TraceUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Trace": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "oppositionId": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "EdgeCreate": {
      "type": "object",
      "required": [
        "expressionEnd",
        "expressionStart",
        "templateEnd",
        "templateStart"
      ],
      "properties": {
        "expressionStart": {
          "type": "string"
        },
        "expressionEnd": {
          "type": "string"
        },
        "templateStart": {
          "type": "string"
        },
        "templateEnd": {
          "type": "string"
        }
      }
    },
    "Edge": {
      "type": "object",
      "required": [
        "expressionEnd",
        "expressionStart",
        "templateEnd",
        "templateStart"
      ],
      "properties": {
        "expressionStart": {
          "type": "string"
        },
        "expressionEnd": {
          "type": "string"
        },
        "templateStart": {
          "type": "string"
        },
        "templateEnd": {
          "type": "string"
        },
        "edgeId": {
          "type": "string"
        },
        "traceId": {
          "type": "string"
        }
      }
    },
    "UserCreate": {
      "type": "object",
      "required": [
        "displayName",
        "emailAddress",
        "id",
        "isExternal"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "isExternal": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "Template": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "TemplateUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Group": {
      "type": "object",
      "required": [
        "displayName",
        "emailAddress",
        "id"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "GroupCreate": {
      "type": "object",
      "required": [
        "displayName",
        "emailAddress",
        "id"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "GroupUpdate": {
      "type": "object",
      "required": [
        "displayName",
        "emailAddress"
      ],
      "properties": {
        "displayName": {
          "type": "string"
        },
        "emailAddress": {
          "type": "string"
        }
      }
    },
    "License": {
      "type": "object",
      "properties": {
        "licensee": {
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "seatCount": {
          "type": "integer",
          "format": "int32"
        },
        "floatCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "TraceResponse": {
      "type": "object",
      "properties": {
        "idStart": {
          "type": "string"
        },
        "idEnd": {
          "type": "string"
        }
      }
    },
    "TraceCreate": {
      "type": "object",
      "required": [
        "endName",
        "startName"
      ],
      "properties": {
        "startName": {
          "type": "string"
        },
        "endName": {
          "type": "string"
        }
      }
    },
    "AttributeCreate": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "editabilityRule": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "BOOLEAN",
            "DATETIME",
            "DECIMAL",
            "ENUMERATION",
            "NUMBER",
            "RICHTEXT",
            "TEXT",
            "SHORTTEXT",
            "RAW",
            "JSON"
          ]
        }
      }
    },
    "AttributeUpdate": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "editabilityRule": {
          "type": "string"
        }
      }
    },
    "Attribute": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "editabilityRule": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "BOOLEAN",
            "DATETIME",
            "DECIMAL",
            "ENUMERATION",
            "NUMBER",
            "RICHTEXT",
            "TEXT",
            "SHORTTEXT",
            "RAW",
            "JSON"
          ]
        },
        "id": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "DefaultValue": {
      "type": "object",
      "required": [
        "key"
      ],
      "properties": {
        "key": {
          "type": "string"
        }
      }
    },
    "EnumerationValueCreate": {
      "type": "object",
      "required": [
        "key",
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "EnumerationValueUpdate": {
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "NodeKey": {
      "type": "object",
      "required": [
        "id",
        "uri",
        "version"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "1",
          "description": "ID of the node",
          "readOnly": true
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "example": 1520492446,
          "description": "Current node version",
          "readOnly": true
        },
        "uri": {
          "type": "string",
          "format": "uri",
          "example": "https://localhost:8443/fidelia/ff/api/rest/v1/sheets/HdaEwcliKw/versions/jcfybqui/modes/TENTATIVE/nodes/12",
          "description": "URL of the node REST resource",
          "readOnly": true
        }
      },
      "description": "Node key details"
    },
    "NodeAttribute": {
      "type": "object",
      "required": [
        "attributeId",
        "type"
      ],
      "properties": {
        "attributeId": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "BOOLEAN",
            "DATETIME",
            "DECIMAL",
            "ENUMERATION",
            "NUMBER",
            "RICHTEXT",
            "TEXT",
            "SHORTTEXT",
            "RAW",
            "JSON"
          ]
        },
        "value": {
          "type": "string"
        }
      }
    },
    "NodeCreate": {
      "type": "object",
      "required": [
        "nodeAttributes",
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string"
        },
        "nodeAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeAttribute"
          }
        },
        "reference": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "Attachment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "checksum": {
          "type": "string"
        },
        "mimeType": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "Node": {
      "type": "object",
      "required": [
        "nodeAttributes",
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string"
        },
        "nodeAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeAttribute"
          }
        },
        "reference": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "uri": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "attachments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Attachment"
          }
        }
      }
    },
    "SecurityObject": {
      "type": "object",
      "properties": {
        "entity": {
          "type": "string",
          "enum": [
            "USER",
            "GROUP"
          ]
        },
        "id": {
          "type": "string"
        }
      }
    },
    "TaskUpdate": {
      "type": "object",
      "required": [
        "allowedFolders",
        "description",
        "externalId",
        "owners",
        "reviewers",
        "summary",
        "writers"
      ],
      "properties": {
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "owners": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "writers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "reviewers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "allowedFolders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PingResponse": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "clusterTime": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "NodeUpdate": {
      "type": "object",
      "required": [
        "nodeAttributes",
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "string"
        },
        "nodeAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeAttribute"
          }
        }
      }
    },
    "Sheet": {
      "type": "object",
      "required": [
        "folderId",
        "name",
        "owners",
        "templateId",
        "writers"
      ],
      "properties": {
        "folderId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "templateId": {
          "type": "string"
        },
        "owners": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "writers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "uri": {
          "type": "string",
          "example": "https://localhost:8443/fidelia/ff/api/rest/v1/sheets/HdaEwcliKw/versions/jcfybqui",
          "description": "URL of the sheet REST resource"
        },
        "createdBy": {
          "type": "string",
          "example": "root",
          "description": "ID of the user that created the sheet"
        },
        "id": {
          "type": "string",
          "example": "HdaEwcliKw",
          "description": "ID of the sheet"
        },
        "version": {
          "type": "string",
          "example": "jcfybqui",
          "description": "Version of the sheet"
        },
        "type": {
          "type": "string",
          "example": "REGULAR",
          "description": "Type of the sheet",
          "enum": [
            "REGULAR",
            "BRANCH",
            "BASELINE"
          ]
        },
        "status": {
          "type": "string"
        },
        "branchVersions": {
          "type": "array",
          "description": "All branch versions as long. Convert the value to string with radix 36 to use it in REST calls",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "baselineVersions": {
          "type": "array",
          "description": "All baselines versions as long. Convert the value to string with radix 36 to use it in REST calls",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "originVersion": {
          "type": "integer",
          "format": "int64",
          "description": "Origin versions of the sheet as long. Convert the value to string with radix 36 to use it in REST calls. Only available if hseet type is BRANCH or BASELINE"
        }
      },
      "description": "Sheet details"
    },
    "NodeStructure": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "Filter": {
      "type": "object",
      "properties": {
        "attributeId": {
          "type": "string"
        },
        "terms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conjunction": {
          "type": "string",
          "enum": [
            "MISSING",
            "EXISTS",
            "NOT",
            "AND",
            "OR"
          ]
        }
      }
    },
    "Filtering": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Filter"
          }
        }
      }
    },
    "Sort": {
      "type": "object",
      "properties": {
        "attributeId": {
          "type": "string"
        },
        "order": {
          "type": "string",
          "enum": [
            "ASC",
            "DESC"
          ]
        }
      }
    },
    "NodeReference": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "reference": {
          "type": "string"
        },
        "taskId": {
          "type": "string"
        }
      }
    },
    "NodeLevel": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "level": {
          "type": "integer",
          "format": "int64"
        },
        "taskId": {
          "type": "string"
        }
      }
    },
    "FolderKey": {
      "type": "object",
      "required": [
        "id",
        "uri"
      ],
      "properties": {
        "id": {
          "type": "string",
          "example": "HdaEwcliKw",
          "description": "ID of the folder",
          "readOnly": true
        },
        "uri": {
          "type": "string",
          "format": "uri",
          "example": "https://localhost:8443/fidelia/ff/api/rest/v1/folders/HdaEwcliKw",
          "description": "URL of the folder REST resource",
          "readOnly": true
        }
      },
      "description": "Folder key details"
    },
    "FolderCreate": {
      "type": "object",
      "required": [
        "name",
        "owners",
        "parent",
        "readers",
        "writers"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "owners": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "writers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "readers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        }
      }
    },
    "Folder": {
      "type": "object",
      "required": [
        "name",
        "owners",
        "readers",
        "writers"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "owners": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "writers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "readers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "id": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        },
        "subfolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subfolder"
          }
        },
        "subsheets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subsheet"
          }
        }
      }
    },
    "Subfolder": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "Subsheet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "NodeTraceCreate": {
      "type": "object",
      "required": [
        "targetNodeId",
        "targetSheetId",
        "targetSheetVersion"
      ],
      "properties": {
        "targetSheetId": {
          "type": "string"
        },
        "targetSheetVersion": {
          "type": "string"
        },
        "targetNodeId": {
          "type": "string"
        }
      }
    },
    "NodeTrace": {
      "type": "object",
      "properties": {
        "sheetId": {
          "type": "string"
        },
        "sheetVersion": {
          "type": "string"
        },
        "nodeId": {
          "type": "string"
        },
        "traceId": {
          "type": "string"
        }
      }
    },
    "SheetKey": {
      "type": "object",
      "required": [
        "id",
        "uri",
        "version"
      ],
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri",
          "example": "https://localhost:8443/fidelia/ff/api/rest/v1/sheets/HdaEwcliKw/versions/jcfybqui",
          "description": "URL of the sheet REST resource",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "example": "HdaEwcliKw",
          "description": "ID of the sheet",
          "readOnly": true
        },
        "version": {
          "type": "string",
          "example": "jcfybqui",
          "description": "Version of the sheet",
          "readOnly": true
        }
      },
      "description": "Sheet key details"
    },
    "SheetCreate": {
      "type": "object",
      "required": [
        "folderId",
        "name",
        "owners",
        "templateId",
        "writers"
      ],
      "properties": {
        "folderId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "templateId": {
          "type": "string"
        },
        "owners": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "writers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        }
      }
    },
    "SheetUpdate": {
      "type": "object",
      "required": [
        "folderId"
      ],
      "properties": {
        "folderId": {
          "type": "string"
        }
      }
    },
    "TaskKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "TaskSearch": {
      "type": "object",
      "properties": {
        "total": {
          "type": "integer",
          "format": "int32"
        },
        "offset": {
          "type": "integer",
          "format": "int32"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaskKey"
          }
        }
      }
    },
    "TaskWorkflow": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "OPEN",
            "REVIEW",
            "CLOSED"
          ]
        }
      }
    },
    "Task": {
      "type": "object",
      "required": [
        "allowedFolders",
        "description",
        "externalId",
        "owners",
        "reviewers",
        "summary",
        "writers"
      ],
      "properties": {
        "summary": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "owners": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "writers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "reviewers": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/SecurityObject"
          }
        },
        "allowedFolders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "OPEN",
            "REVIEW",
            "CLOSED"
          ]
        },
        "uri": {
          "type": "string"
        }
      }
    },
    "AggregationResultResponseV1": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "example": "java.lang.Long/java.lang.Double",
          "description": "Type of the aggregation",
          "readOnly": true
        },
        "values": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AggregationValueResponseV1"
          }
        }
      }
    },
    "AggregationValueResponseV1": {
      "type": "object"
    },
    "AttributeAggregationsResponse": {
      "type": "object",
      "properties": {
        "attribute": {
          "type": "string",
          "example": "attribute:attributeId",
          "description": "ID of the attribute",
          "readOnly": true
        },
        "aggregations": {
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AggregationResultResponseV1"
          }
        }
      },
      "description": "Attribute aggregations"
    },
    "SheetAggregationResponse": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "description": "List of attribute aggregations",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/AttributeAggregationsResponse"
          }
        }
      },
      "description": "Sheet aggregations"
    },
    "LogEntriesResponse": {
      "type": "object",
      "description": "Log entries"
    },
    "ServerStatusResponse": {
      "type": "object",
      "description": "Server status"
    },
    "LogConfigResponse": {
      "type": "object",
      "description": "Log config"
    },
    "FolderActionDefinitionResponse": {
      "type": "object",
      "required": [
        "actionUrl",
        "actions",
        "id",
        "name",
        "welcomeFile"
      ],
      "properties": {
        "actions": {
          "type": "array",
          "description": "actions",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/FolderActionDefinitionResponse"
          }
        },
        "id": {
          "type": "string",
          "example": "647455ca-3af7-11e7-a919-92ebcb67fe33",
          "description": "id",
          "readOnly": true
        },
        "actionUrl": {
          "type": "string",
          "example": "http://192,168.2.1:8448/actions",
          "description": "actionUrl",
          "readOnly": true
        },
        "welcomeFile": {
          "type": "string",
          "example": "index.html?sheetId={{sheetId}}&sheetVersion={{shetVersion}}",
          "description": "actionUrl",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "ReqIF Import",
          "description": "name",
          "readOnly": true
        }
      },
      "description": "Definition of a folder action"
    },
    "EditFolderActionDefinitionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ReqIF Import",
          "description": "Name of action",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "example": "actions/import.html",
          "description": "Name of action",
          "readOnly": true
        },
        "welcomeFile": {
          "type": "string",
          "example": "index.html",
          "description": "Welcome file name that should be used if no further path information is available",
          "readOnly": true
        },
        "requiresFolderOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder owner permission",
          "readOnly": true
        },
        "requiresFolderWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder writer permission",
          "readOnly": true
        }
      },
      "description": "Request object that contains all data of a folder action definition"
    },
    "CreateFolderActionDefinitionRequest": {
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "ReqIF Import",
          "description": "Name of action",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "example": "http://192.168.2.1:8080/wordimport",
          "description": "Url of the action server",
          "readOnly": true
        },
        "welcomeFile": {
          "type": "string",
          "example": "index.html",
          "description": "Welcome file name that should be used if no further path information is available",
          "readOnly": true
        },
        "requiresFolderOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder owner permission",
          "readOnly": true
        },
        "requiresFolderWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder writer permission",
          "readOnly": true
        }
      },
      "description": "Request object that contains all data for a folder action definition"
    },
    "NodeActionDefinitionResponse": {
      "type": "object",
      "required": [
        "actionUrl",
        "actions",
        "id",
        "name",
        "welcomeFile"
      ],
      "properties": {
        "actions": {
          "type": "array",
          "description": "actions",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/NodeActionDefinitionResponse"
          }
        },
        "id": {
          "type": "string",
          "example": "647455ca-3af7-11e7-a919-92ebcb67fe33",
          "description": "id",
          "readOnly": true
        },
        "actionUrl": {
          "type": "string",
          "example": "http://192,168.2.1:8448/actions",
          "description": "actionUrl",
          "readOnly": true
        },
        "welcomeFile": {
          "type": "string",
          "example": "index.html?sheetId={{sheetId}}&sheetVersion={{shetVersion}}",
          "description": "actionUrl",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "ReqIF Import",
          "description": "name",
          "readOnly": true
        }
      },
      "description": "Definition of a node action"
    },
    "EditNodeActionDefinitionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ReqIF Import",
          "description": "Name of action",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "example": "actions/import.html",
          "description": "Name of action",
          "readOnly": true
        },
        "welcomeFile": {
          "type": "string",
          "example": "index.html",
          "description": "Welcome file name that should be used if no further path information is available",
          "readOnly": true
        },
        "requiresFolderOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder owner permission",
          "readOnly": true
        },
        "requiresFolderWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder writer permission",
          "readOnly": true
        },
        "requiresSheetOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with sheet owner permission",
          "readOnly": true
        },
        "requiresSheetWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with sheet writer permission",
          "readOnly": true
        }
      },
      "description": "Request object that contains all data of a node action definition"
    },
    "CreateNodeActionDefinitionRequest": {
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "ReqIF Import",
          "description": "Name of action",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "example": "http://192.168.2.1:8080/wordimport",
          "description": "Url of the action server",
          "readOnly": true
        },
        "welcomeFile": {
          "type": "string",
          "example": "index.html",
          "description": "Welcome file name that should be used if no further path information is available",
          "readOnly": true
        },
        "requiresFolderOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder owner permission",
          "readOnly": true
        },
        "requiresFolderWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder writer permission",
          "readOnly": true
        },
        "requiresSheetOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with sheet owner permission",
          "readOnly": true
        },
        "requiresSheetWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with sheet writer permission",
          "readOnly": true
        }
      },
      "description": "Request object that contains all data for a node action definition"
    },
    "SheetActionDefinitionResponse": {
      "type": "object",
      "required": [
        "actionUrl",
        "actions",
        "id",
        "name",
        "welcomeFile"
      ],
      "properties": {
        "actions": {
          "type": "array",
          "description": "actions",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/SheetActionDefinitionResponse"
          }
        },
        "id": {
          "type": "string",
          "example": "647455ca-3af7-11e7-a919-92ebcb67fe33",
          "description": "id",
          "readOnly": true
        },
        "actionUrl": {
          "type": "string",
          "example": "http://192,168.2.1:8448/actions",
          "description": "actionUrl",
          "readOnly": true
        },
        "welcomeFile": {
          "type": "string",
          "example": "index.html?sheetId={{sheetId}}&sheetVersion={{shetVersion}}",
          "description": "actionUrl",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "ReqIF Import",
          "description": "name",
          "readOnly": true
        }
      },
      "description": "Definition of a sheet action"
    },
    "EditSheetActionDefinitionRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "ReqIF Import",
          "description": "Name of action",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "example": "actions/import.html",
          "description": "Name of action",
          "readOnly": true
        },
        "welcomeFile": {
          "type": "string",
          "example": "index.html",
          "description": "Welcome file name that should be used if no further path information is available",
          "readOnly": true
        },
        "requiresFolderOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder owner permission",
          "readOnly": true
        },
        "requiresFolderWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder writer permission",
          "readOnly": true
        },
        "requiresSheetOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with sheet owner permission",
          "readOnly": true
        },
        "requiresSheetWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with sheet writer permission",
          "readOnly": true
        }
      },
      "description": "Request object that contains all data of a sheet action definition"
    },
    "CreateSheetActionDefinitionRequest": {
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "ReqIF Import",
          "description": "Name of action",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "example": "http://192.168.2.1:8080/wordimport",
          "description": "Url of the action server",
          "readOnly": true
        },
        "welcomeFile": {
          "type": "string",
          "example": "index.html",
          "description": "Welcome file name that should be used if no further path information is available",
          "readOnly": true
        },
        "requiresFolderOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder owner permission",
          "readOnly": true
        },
        "requiresFolderWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with folder writer permission",
          "readOnly": true
        },
        "requiresSheetOwner": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with sheet owner permission",
          "readOnly": true
        },
        "requiresSheetWriter": {
          "type": "boolean",
          "example": true,
          "description": "Should the action only be executed by users with sheet writer permission",
          "readOnly": true
        }
      },
      "description": "Request object that contains all data for a sheet action definition"
    },
    "DashboardDefinitionResponse": {
      "type": "object",
      "required": [
        "dashboardFileUrl",
        "hasReportParameters",
        "height",
        "id",
        "mode",
        "name",
        "url",
        "width"
      ],
      "properties": {
        "mode": {
          "type": "string",
          "example": "BASE",
          "description": "Sheet mode for which the dashboard definition is configured",
          "readOnly": true,
          "enum": [
            "BASE",
            "TENTATIVE"
          ]
        },
        "id": {
          "type": "string",
          "example": "8fd751db-a9b6-4b15-966d-05c16dd28cbd",
          "description": "ID of the dashboard definition",
          "readOnly": true
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "example": 800,
          "description": "Width of dashboard dialog in pixel",
          "readOnly": true
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "example": 600,
          "description": "Height of dashboard dialog in pixel",
          "readOnly": true
        },
        "dashboardFileUrl": {
          "type": "string",
          "example": "https://localhost:8443/fidelia/api/ff/rest/v1/templates/4f010ed2-319b-11e7-93ae-92361f002671/dashboards/8fd751db-a9b6-4b15-966d-05c16dd28cbd/file",
          "description": "REST URL of the BIRT report definition file (rptdesign). Can be used to retrieve the BIRT report definition file (rptdesign) via REST GET request",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "Requirements per priority",
          "description": "Name of the dashboard.",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "example": "https://localhost:8443/fidelia/api/ff/rest/v1/templates/4f010ed2-319b-11e7-93ae-92361f002671/dashboards/8fd751db-a9b6-4b15-966d-05c16dd28cbd",
          "description": "REST URL of the dashboard definition. Can be used to retrieve additional information via REST GET request",
          "readOnly": true
        },
        "hasReportParameters": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the report has input parameters (Additional details about report parameters can be found in fidelia report guide)",
          "readOnly": true
        }
      },
      "description": "Response object that contains all data of a dashboard definition"
    },
    "ReportDefinitionResponse": {
      "type": "object",
      "required": [
        "format",
        "hasReportParameters",
        "id",
        "mode",
        "name",
        "reportFileUrl",
        "url"
      ],
      "properties": {
        "mode": {
          "type": "string",
          "example": "TENTATIVE",
          "description": "Sheet mode for which the report definition is configured",
          "readOnly": true,
          "enum": [
            "BASE",
            "TENTATIVE"
          ]
        },
        "id": {
          "type": "string",
          "example": "e92edfed-e4e9-47d5-94e2-597bc9fb7fc3",
          "description": "ID of the report.",
          "readOnly": true
        },
        "reportFileUrl": {
          "type": "string",
          "example": "https://localhost:8443/fidelia/api/ff/rest/v1/templates/4f010ed2-319b-11e7-93ae-92361f002671/reports/e92edfed-e4e9-47d5-94e2-597bc9fb7fc3/file",
          "description": "REST URL of the BIRT report definition file (rptdesign). Can be used to retrieve the BIRT report definition file (rptdesign) via REST GET request",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "PDF Export",
          "description": "Name of the report",
          "readOnly": true
        },
        "format": {
          "type": "string",
          "example": "PDF",
          "description": "Target format of the report",
          "readOnly": true,
          "enum": [
            "XLSX",
            "HTML",
            "PDF"
          ]
        },
        "url": {
          "type": "string",
          "example": "https://localhost:8443/fidelia/api/ff/rest/v1/templates/4f010ed2-319b-11e7-93ae-92361f002671/reports/e92edfed-e4e9-47d5-94e2-597bc9fb7fc3",
          "description": "REST URL of the report definition. Can be used to retrieve additional information via REST GET request",
          "readOnly": true
        },
        "hasReportParameters": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the report has input parameters (Additional details about report parameters can be found in fidelia report guide)",
          "readOnly": true
        }
      },
      "description": "Response object that contains all data of a report definition"
    },
    "ReportDefinitionsResponse": {
      "type": "object",
      "required": [
        "baseReport",
        "templateId",
        "tentativeReports"
      ],
      "properties": {
        "baseReport": {
          "type": "array",
          "description": "Report definitions for BASE sheets of the given template",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ReportDefinitionResponse"
          }
        },
        "tentativeReports": {
          "type": "array",
          "description": "Report definitions for TENTATIVE sheet of the given template",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ReportDefinitionResponse"
          }
        },
        "templateId": {
          "type": "string",
          "example": "4f010ed2-319b-11e7-93ae-92361f002671",
          "description": "ID of the template",
          "readOnly": true
        }
      },
      "description": "Response object that contains all report definitions of a template"
    },
    "AttributeColumnDefinitionResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ColumnDefinitionResponse"
        },
        {
          "type": "object",
          "required": [
            "attributeId",
            "attributeUrl"
          ],
          "properties": {
            "attributeId": {
              "type": "string",
              "example": "96bd0b26-33c2-11e7-a919-92ebcb67fe33",
              "description": "ID of the attribute that was added to the view",
              "readOnly": true
            },
            "attributeUrl": {
              "type": "string",
              "example": "https://localhost:8443/fidelia/api/ff/rest&v1/templates/4053b70a-3ae6-11e7-a919-92ebcb67fe33/attributes/96bd0b26-33c2-11e7-a919-92ebcb67fe33",
              "description": "REST URL of the attribute definition. Can be used to retreive additional information via REST GET request",
              "readOnly": true
            }
          },
          "description": "Response object returned when creating a new attribute column in the view"
        }
      ]
    },
    "ColumnDefinitionResponse": {
      "type": "object",
      "required": [
        "autoexpand",
        "displayName",
        "gridType",
        "hideable",
        "id",
        "resizeable",
        "type",
        "visible",
        "width"
      ],
      "discriminator": "type",
      "properties": {
        "id": {
          "type": "string",
          "example": "253c9d0e-3ae3-11e7-a919-92ebcb67fe33",
          "description": "ID of column",
          "readOnly": true
        },
        "visible": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the column is visible by default",
          "readOnly": true
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "example": 150,
          "description": "Width of the column in pixel",
          "readOnly": true
        },
        "resizeable": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if users are able to resize the column",
          "readOnly": true
        },
        "hideable": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if users are able to hide the column",
          "readOnly": true
        },
        "gridType": {
          "type": "string",
          "example": "CONTENT",
          "description": "Type of the grid that contains the column",
          "readOnly": true,
          "enum": [
            "OUTLINE",
            "CONTENT"
          ]
        },
        "autoexpand": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the column should fill the remaining space of the grid",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "example": "AttributeColumnDefinitionResponse",
          "description": "Type of the response. Depending on the type additional parameters will be returned",
          "readOnly": true,
          "enum": [
            "AttributeColumnDefinitionResponse",
            "DynamicFormColumnDefinitionResponse",
            "InternalAttributeColumnDefinitionResponse",
            "TraceColumnDefinitionResponse"
          ]
        },
        "displayName": {
          "type": "string",
          "example": "Description",
          "description": "Display name of the column",
          "readOnly": true
        }
      },
      "description": "Definition of a view column"
    },
    "DynamicFormColumnDefinitionResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ColumnDefinitionResponse"
        },
        {
          "type": "object",
          "required": [
            "dataAttributeId",
            "dataAttributeUrl",
            "templateAttributeId",
            "templateAttributeUrl"
          ],
          "properties": {
            "dataAttributeId": {
              "type": "string",
              "example": "5dce3260-3ae6-11e7-a919-92ebcb67fe33",
              "description": "ID of the attribute that stores the data of the form",
              "readOnly": true
            },
            "templateAttributeId": {
              "type": "string",
              "example": "eef07f88-3ae5-11e7-a919-92ebcb67fe33",
              "description": "ID of the attribute that stores the template of the form",
              "readOnly": true
            },
            "templateAttributeUrl": {
              "type": "string",
              "example": "https://localhost:8443/fidelia/api/ff/rest/v1/templates/207cd330-3ae6-11e7-a919-92ebcb67fe33/attributes/eef07f88-3ae5-11e7-a919-92ebcb67fe33",
              "description": "Url for retrieving details of the template attribute",
              "readOnly": true
            },
            "dataAttributeUrl": {
              "type": "string",
              "example": "https://localhost:8443/fidelia/api/ff/rest/v1/templates/207cd330-3ae6-11e7-a919-92ebcb67fe33/attributes/5dce3260-3ae6-11e7-a919-92ebcb67fe33",
              "description": "Url for retrieving details of the data attribute",
              "readOnly": true
            }
          },
          "description": "Definition of a dynamic form column"
        }
      ]
    },
    "InternalAttributeColumnDefinitionResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ColumnDefinitionResponse"
        },
        {
          "type": "object",
          "properties": {},
          "description": "Definition of a view column"
        }
      ]
    },
    "TraceColumnDefinitionResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/ColumnDefinitionResponse"
        },
        {
          "type": "object",
          "required": [
            "traceIds"
          ],
          "properties": {
            "traceIds": {
              "type": "array",
              "example": "eef07f88-3ae5-11e7-a919-92ebcb67fe33",
              "description": "IDs of traces that should be displayed in the column",
              "readOnly": true,
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Definition of a trace column"
        }
      ]
    },
    "ViewDefinitionDetailsResponse": {
      "type": "object",
      "properties": {
        "contentColumns": {
          "type": "array",
          "description": "List of all columns in the content grid",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ColumnDefinitionResponse"
          }
        },
        "outlineColumns": {
          "type": "array",
          "description": "List of all columns in the outline grid",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ColumnDefinitionResponse"
          }
        },
        "mode": {
          "type": "string",
          "example": "TENTATIVE",
          "description": "Sheet mode for which the column definition is configured",
          "readOnly": true,
          "enum": [
            "BASE",
            "TENTATIVE"
          ]
        },
        "defaultView": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the view is configured as default view",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "example": "Default",
          "description": "Id of the view",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "example": "https://localhost:8443/fidelia/api/ff/rest/v1/templates/9ab9e8d4-3aed-11e7-a919-92ebcb67fe33/views/c4211094-4f3d-11e7-b114-b2f933d5fe66/modes/TENTATIVE",
          "description": "URl for retrieving detail information of the view",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "Author View",
          "description": "Display name of the view",
          "readOnly": true
        }
      },
      "description": "View definition details"
    },
    "CreateAttributeViewColumnRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/CreateViewColumnRequest"
        },
        {
          "type": "object",
          "required": [
            "attributeId"
          ],
          "properties": {
            "internalAttribute": {
              "type": "boolean"
            },
            "format": {
              "type": "boolean",
              "example": true,
              "description": "Flag that indicated if the columns should be suroundend by heading HTML tags if the row has a level"
            },
            "attributeId": {
              "type": "string",
              "example": "253c9d0e-3ae3-11e7-a919-92ebcb67fe33",
              "description": "ID of the attribute"
            }
          },
          "description": "Request for creation of a new attribute column"
        }
      ]
    },
    "CreateDynamicFormViewColumnRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/CreateViewColumnRequest"
        },
        {
          "type": "object",
          "required": [
            "dataAttributeId",
            "templateAttributeId"
          ],
          "properties": {
            "templateAttributeId": {
              "type": "string",
              "readOnly": true
            },
            "dataAttributeId": {
              "type": "string",
              "readOnly": true
            }
          },
          "description": "Request for creation of a new dynamic form column"
        }
      ]
    },
    "CreateTraceViewColumnRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/CreateViewColumnRequest"
        },
        {
          "type": "object",
          "required": [
            "traceIds"
          ],
          "properties": {
            "traceIds": {
              "type": "array",
              "example": "253c9d0e-3ae3-11e7-a919-92ebcb67fe33",
              "description": "ID of the traces that should be added to the column",
              "readOnly": true,
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Request for creation of a new trace column"
        }
      ]
    },
    "CreateViewColumnRequest": {
      "type": "object",
      "required": [
        "type"
      ],
      "discriminator": "type",
      "properties": {
        "type": {
          "type": "string",
          "example": "CreateAttributeViewColumnRequest",
          "description": "Type of the request. Depending on the type, additional parameters are supported/mandatory",
          "enum": [
            "CreateAttributeViewColumnRequest",
            "CreateDynamicFormViewColumnRequest",
            "CreateTraceViewColumnRequest"
          ]
        },
        "displayName": {
          "type": "string",
          "example": "Description Text",
          "description": "displayName"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "example": 250,
          "description": "Width of the column in pixel"
        },
        "resizeable": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if users are able to resize the column"
        },
        "hideable": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if users are able to hide the column"
        },
        "visible": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the column is visible by default"
        },
        "autoexpand": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the column should fill the remaining space of the grid"
        },
        "reference": {
          "type": "string",
          "example": "cMt6LaUAJI",
          "description": "Reference column where tthis column should be moved to"
        }
      },
      "description": "Request for new view column"
    },
    "ViewDefinitionResponse": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string",
          "example": "TENTATIVE",
          "description": "Sheet mode for which the column definition is configured",
          "readOnly": true,
          "enum": [
            "BASE",
            "TENTATIVE"
          ]
        },
        "defaultView": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the view is configured as default view",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "example": "Default",
          "description": "Id of the view",
          "readOnly": true
        },
        "url": {
          "type": "string",
          "example": "https://localhost:8443/fidelia/api/ff/rest/v1/templates/9ab9e8d4-3aed-11e7-a919-92ebcb67fe33/views/c4211094-4f3d-11e7-b114-b2f933d5fe66/modes/TENTATIVE",
          "description": "URl for retrieving detail information of the view",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "example": "Author View",
          "description": "Display name of the view",
          "readOnly": true
        }
      },
      "description": "View definition"
    },
    "EditAttributeViewColumnRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/EditViewColumnRequest"
        },
        {
          "type": "object",
          "properties": {
            "format": {
              "type": "boolean",
              "example": true,
              "description": "Flag that indicated if the columns should be suroundend by heading HTML tags if the row has a level"
            }
          },
          "description": "Request object for editing a attribute view column"
        }
      ]
    },
    "EditDynamicFormViewColumnRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/EditViewColumnRequest"
        },
        {
          "type": "object",
          "properties": {},
          "description": "Request object for editing a dynamic form view column"
        }
      ]
    },
    "EditTraceViewColumnRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/EditViewColumnRequest"
        },
        {
          "type": "object",
          "properties": {
            "traceIds": {
              "type": "array",
              "example": "true",
              "description": "All trace ids that should be displayed in the column",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Request object for editing a trace view column"
        }
      ]
    },
    "EditViewColumnRequest": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "displayName": {
          "type": "string",
          "example": "Description",
          "description": "Display name of the column"
        },
        "width": {
          "type": "integer",
          "format": "int32",
          "example": 150,
          "description": "Width of the column in pixel"
        },
        "resizeable": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if users are able to resize the column"
        },
        "hideable": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if users are able to hide the column"
        },
        "visible": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the column is visible by default"
        },
        "autoexpand": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the column should fill the remaining space of the grid"
        },
        "reference": {
          "type": "string",
          "example": "cMt6LaUAJI",
          "description": "Reference column where tthis column should be moved to"
        }
      },
      "description": "Request object for editing a view column"
    },
    "EditViewRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Author View",
          "description": "Name of the view"
        }
      },
      "description": "Edit existing view"
    },
    "ViewsResponse": {
      "type": "object",
      "properties": {
        "baseViews": {
          "type": "array",
          "description": "All views for base shete mode",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ViewDefinitionResponse"
          }
        },
        "templateId": {
          "type": "string",
          "example": "e32461bc-3aed-11e7-a919-92ebcb67fe33",
          "description": "Template ID",
          "readOnly": true
        },
        "tentativeViews": {
          "type": "array",
          "description": "All views for tentative sheet mode",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/ViewDefinitionResponse"
          }
        }
      },
      "description": "All views of a template"
    },
    "CreateViewRequest": {
      "type": "object",
      "properties": {
        "mode": {
          "type": "string",
          "example": "TENTATIVE",
          "description": "Sheet mode for which the view should be created",
          "enum": [
            "BASE",
            "TENTATIVE"
          ]
        },
        "name": {
          "type": "string",
          "example": "Author View",
          "description": "Name of the view"
        },
        "defaultView": {
          "type": "boolean",
          "example": true,
          "description": "Flag that indicates if the view is the default view of the template"
        }
      },
      "description": "Request for new view"
    }
  }
}